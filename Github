import express, { Request, Response } from "express";

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp.js";
import { z } from "zod";

const server = new McpServer({
  name: "mcp-streamable-http",
  version: "1.0.0",
});




// Tool: Get GitHub Profile
const getGithubProfile = server.tool(
  "get-github-profile",
  "Get a GitHub user profile by username using Basic Authentication (username and personal access token)",
  {
    username: z.string().describe("GitHub username"),
    token: z.string().describe("GitHub personal access token (used as password in Basic Auth)"),
  },
  async (params: { username: string; token: string }) => {
    const response = await fetch(`https://api.github.com/user`, {
      headers: {
        "Authorization":
          "Basic " + Buffer.from(`${params.username}:${params.token}`).toString("base64"),
        "Accept": "application/vnd.github+json",
        "User-Agent": "MCP-GitHub-Profile-Agent"
      },
    });
    if (!response.ok) {
      return { content: [{ type: "text", text: "GitHub user not found or authentication failed." }] };
    }
    const profile = await response.json();
    return {
      content: [
        {
          type: "text",
          text:
            `Login: ${profile.login}\n` +
            `Name: ${profile.name || "N/A"}\n` +
            `Bio: ${profile.bio || "N/A"}\n` +
            `Location: ${profile.location || "N/A"}\n` +
            `Public Repos: ${profile.public_repos}\n` +
            `Followers: ${profile.followers}\n` +
            `Following: ${profile.following}\n` +
            `Profile URL: ${profile.html_url}`,
        },
      ],
    };
  }
);



const app = express();
app.use(express.json());

const transport: StreamableHTTPServerTransport =
  new StreamableHTTPServerTransport({
    sessionIdGenerator: undefined, // set to undefined for stateless servers
  });

// Setup routes for the server
const setupServer = async () => {
  await server.connect(transport);
};

app.post("/mcp", async (req: Request, res: Response) => {
  console.log("Received MCP request:", req.body);
  try {
    await transport.handleRequest(req, res, req.body);
  } catch (error) {
    console.error("Error handling MCP request:", error);
    if (!res.headersSent) {
      res.status(500).json({
        jsonrpc: "2.0",
        error: {
          code: -32603,
          message: "Internal server error",
        },
        id: null,
      });
    }
  }
});

app.get("/mcp", async (req: Request, res: Response) => {
  console.log("Received GET MCP request");
  res.writeHead(405).end(
    JSON.stringify({
      jsonrpc: "2.0",
      error: {
        code: -32000,
        message: "Method not allowed.",
      },
      id: null,
    })
  );
});

app.delete("/mcp", async (req: Request, res: Response) => {
  console.log("Received DELETE MCP request");
  res.writeHead(405).end(
    JSON.stringify({
      jsonrpc: "2.0",
      error: {
        code: -32000,
        message: "Method not allowed.",
      },
      id: null,
    })
  );
});

// Start the server
const PORT = process.env.PORT || 3000;
setupServer()
  .then(() => {
    app.listen(PORT, () => {
      console.log(`MCP Streamable HTTP Server listening on port ${PORT}`);
    });
  })
  .catch((error) => {
    console.error("Failed to set up the server:", error);
    process.exit(1);
  });
